<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname=" UDP Knee Usable Capacity Test">
      <stringProp name="TestPlan.comments">
      </stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="SERVER_HOST" elementType="Argument">
            <stringProp name="Argument.name">SERVER_HOST</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_PORT" elementType="Argument">
            <stringProp name="Argument.name">SERVER_PORT</stringProp>
            <stringProp name="Argument.value">9090</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TIMEOUT_MS" elementType="Argument">
            <stringProp name="Argument.name">TIMEOUT_MS</stringProp>
            <stringProp name="Argument.value">10000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
    </TestPlan>
    <hashTree>
      <!-- FASE 1: Baseline Test - 10 threads -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="üîµ FASE 1: Baseline (10 threads)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">20</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="UDP Sensor Data" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.net.*
import java.io.*
import java.util.concurrent.ThreadLocalRandom

try {
    // Configura√ß√µes do servidor
    def serverHost = vars.get("SERVER_HOST")
    def serverPort = Integer.parseInt(vars.get("SERVER_PORT"))
    def timeout = Integer.parseInt(vars.get("TIMEOUT_MS"))
    
    // Criar socket UDP
    def socket = new DatagramSocket()
    socket.setSoTimeout(timeout)
    
    // Gerar dados do sensor √∫nicos
    def threadNum = ctx.getThreadNum()
    def iteration = vars.getIteration()
    def timestamp = System.currentTimeMillis()
    def sensorId = "KNEE_SENSOR_${threadNum}_${iteration}"
    def sensorValue = 20.0 + ThreadLocalRandom.current().nextDouble(0, 30)
    
    // Variar tipos de sensores para simular cen√°rio real
    def sensorTypes = ["TEMPERATURE", "HUMIDITY", "PRESSURE", "CO2", "LIGHT"]
    def sensorType = sensorTypes[ThreadLocalRandom.current().nextInt(sensorTypes.size())]
    def location = "Lab_${threadNum % 5}"
    
    // Mensagem UDP otimizada
    def message = "SENSOR_DATA|${sensorId}|${sensorType}|${location}|${timestamp}|${String.format('%.2f', sensorValue)}"
    def buffer = message.getBytes("UTF-8")
    
    // Endere√ßo do servidor
    def address = InetAddress.getByName(serverHost)
    def packet = new DatagramPacket(buffer, buffer.length, address, serverPort)
    
    // Configurar dados do sampler para an√°lise
    SampleResult.setSamplerData("UDP Request: ${message}")
    SampleResult.setRequestHeaders("Host: ${serverHost}:${serverPort}\nProtocol: UDP\nPayload Size: ${buffer.length} bytes")
    
    // Marcar in√≠cio da medi√ß√£o
    def startTime = System.nanoTime()
    SampleResult.sampleStart()
    
    // Enviar mensagem
    socket.send(packet)
    
    // Preparar para receber resposta
    def responseBuffer = new byte[2048]
    def responsePacket = new DatagramPacket(responseBuffer, responseBuffer.length)
    
    try {
        // Receber resposta
        socket.receive(responsePacket)
        def endTime = System.nanoTime()
        SampleResult.sampleEnd()
        
        def response = new String(responsePacket.getData(), 0, responsePacket.getLength(), "UTF-8")
        
        // Configurar resultado do sampler
        SampleResult.setResponseData(response, "UTF-8")
        SampleResult.setDataType(SampleResult.TEXT)
        SampleResult.setResponseCodeOK()
        SampleResult.setResponseMessage("UDP Response Received")
        SampleResult.setBytes(responsePacket.getLength())
        SampleResult.setSentBytes(buffer.length)
        
        // Verificar sucesso da opera√ß√£o
        if (response.contains("SUCCESS") || response.contains("PROCESSED") || response.contains("OK")) {
            SampleResult.setSuccessful(true)
            
            // Extrair m√©tricas adicionais se dispon√≠veis
            if (response.contains("latency:")) {
                def matcher = response =~ /latency:(\d+)/
                if (matcher.find()) {
                    def serverLatency = Long.parseLong(matcher.group(1))
                    vars.put("server_latency", serverLatency.toString())
                }
            }
            
        } else {
            SampleResult.setSuccessful(false)
            SampleResult.setResponseMessage("Response does not indicate success: " + response)
        }
        
        // Estat√≠sticas personalizadas
        def responseTime = (endTime - startTime) / 1000000.0 // ms
        vars.put("custom_response_time", String.format("%.2f", responseTime))
        
    } catch (SocketTimeoutException e) {
        SampleResult.sampleEnd()
        SampleResult.setResponseData("Timeout - No response within ${timeout}ms", "UTF-8")
        SampleResult.setSuccessful(false)
        SampleResult.setResponseCode("408")
        SampleResult.setResponseMessage("Request Timeout")
    }
    
    socket.close()
    
} catch (Exception e) {
    SampleResult.sampleEnd()
    log.error("UDP Error: " + e.getMessage())
    SampleResult.setResponseData("Error: " + e.getMessage(), "UTF-8")
    SampleResult.setSuccessful(false)
    SampleResult.setResponseCode("500")
    SampleResult.setResponseMessage("Internal Error: " + e.getMessage())
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
              <stringProp name="1691835182">PROCESSED</stringProp>
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">Response must indicate successful processing</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Baseline Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">100</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
      
      <!-- FASE 2: Low Load Test - 25 threads -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="üü¢ FASE 2: Low Load (25 threads)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">20</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">25</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay">70</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="UDP Sensor Data" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.net.*
import java.io.*
import java.util.concurrent.ThreadLocalRandom

try {
    def serverHost = vars.get("SERVER_HOST")
    def serverPort = Integer.parseInt(vars.get("SERVER_PORT"))
    def timeout = Integer.parseInt(vars.get("TIMEOUT_MS"))
    
    def socket = new DatagramSocket()
    socket.setSoTimeout(timeout)
    
    def threadNum = ctx.getThreadNum()
    def iteration = vars.getIteration()
    def timestamp = System.currentTimeMillis()
    def sensorId = "KNEE_SENSOR_${threadNum}_${iteration}"
    def sensorValue = 20.0 + ThreadLocalRandom.current().nextDouble(0, 30)
    
    def sensorTypes = ["TEMPERATURE", "HUMIDITY", "PRESSURE", "CO2", "LIGHT"]
    def sensorType = sensorTypes[ThreadLocalRandom.current().nextInt(sensorTypes.size())]
    def location = "Lab_${threadNum % 5}"
    
    def message = "SENSOR_DATA|${sensorId}|${sensorType}|${location}|${timestamp}|${String.format('%.2f', sensorValue)}"
    def buffer = message.getBytes("UTF-8")
    
    def address = InetAddress.getByName(serverHost)
    def packet = new DatagramPacket(buffer, buffer.length, address, serverPort)
    
    SampleResult.setSamplerData("UDP Request: ${message}")
    SampleResult.setRequestHeaders("Host: ${serverHost}:${serverPort}\nProtocol: UDP\nPayload Size: ${buffer.length} bytes")
    
    def startTime = System.nanoTime()
    SampleResult.sampleStart()
    
    socket.send(packet)
    
    def responseBuffer = new byte[2048]
    def responsePacket = new DatagramPacket(responseBuffer, responseBuffer.length)
    
    try {
        socket.receive(responsePacket)
        def endTime = System.nanoTime()
        SampleResult.sampleEnd()
        
        def response = new String(responsePacket.getData(), 0, responsePacket.getLength(), "UTF-8")
        
        SampleResult.setResponseData(response, "UTF-8")
        SampleResult.setDataType(SampleResult.TEXT)
        SampleResult.setResponseCodeOK()
        SampleResult.setResponseMessage("UDP Response Received")
        SampleResult.setBytes(responsePacket.getLength())
        SampleResult.setSentBytes(buffer.length)
        
        if (response.contains("SUCCESS") || response.contains("PROCESSED") || response.contains("OK")) {
            SampleResult.setSuccessful(true)
        } else {
            SampleResult.setSuccessful(false)
            SampleResult.setResponseMessage("Response does not indicate success: " + response)
        }
        
        def responseTime = (endTime - startTime) / 1000000.0
        vars.put("custom_response_time", String.format("%.2f", responseTime))
        
    } catch (SocketTimeoutException e) {
        SampleResult.sampleEnd()
        SampleResult.setResponseData("Timeout - No response within ${timeout}ms", "UTF-8")
        SampleResult.setSuccessful(false)
        SampleResult.setResponseCode("408")
        SampleResult.setResponseMessage("Request Timeout")
    }
    
    socket.close()
    
} catch (Exception e) {
    SampleResult.sampleEnd()
    log.error("UDP Error: " + e.getMessage())
    SampleResult.setResponseData("Error: " + e.getMessage(), "UTF-8")
    SampleResult.setSuccessful(false)
    SampleResult.setResponseCode("500")
    SampleResult.setResponseMessage("Internal Error: " + e.getMessage())
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
              <stringProp name="1691835182">PROCESSED</stringProp>
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">Response must indicate successful processing</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Low Load Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">50</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
      
      <!-- FASE 3: Medium Load Test - 50 threads -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="üü° FASE 3: Medium Load (50 threads)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">20</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">50</stringProp>
        <stringProp name="ThreadGroup.ramp_time">15</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay">140</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="UDP Sensor Data" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.net.*
import java.io.*
import java.util.concurrent.ThreadLocalRandom

try {
    def serverHost = vars.get("SERVER_HOST")
    def serverPort = Integer.parseInt(vars.get("SERVER_PORT"))
    def timeout = Integer.parseInt(vars.get("TIMEOUT_MS"))
    
    def socket = new DatagramSocket()
    socket.setSoTimeout(timeout)
    
    def threadNum = ctx.getThreadNum()
    def iteration = vars.getIteration()
    def timestamp = System.currentTimeMillis()
    def sensorId = "KNEE_SENSOR_${threadNum}_${iteration}"
    def sensorValue = 20.0 + ThreadLocalRandom.current().nextDouble(0, 30)
    
    def sensorTypes = ["TEMPERATURE", "HUMIDITY", "PRESSURE", "CO2", "LIGHT"]
    def sensorType = sensorTypes[ThreadLocalRandom.current().nextInt(sensorTypes.size())]
    def location = "Lab_${threadNum % 5}"
    
    def message = "SENSOR_DATA|${sensorId}|${sensorType}|${location}|${timestamp}|${String.format('%.2f', sensorValue)}"
    def buffer = message.getBytes("UTF-8")
    
    def address = InetAddress.getByName(serverHost)
    def packet = new DatagramPacket(buffer, buffer.length, address, serverPort)
    
    SampleResult.setSamplerData("UDP Request: ${message}")
    SampleResult.setRequestHeaders("Host: ${serverHost}:${serverPort}\nProtocol: UDP\nPayload Size: ${buffer.length} bytes")
    
    def startTime = System.nanoTime()
    SampleResult.sampleStart()
    
    socket.send(packet)
    
    def responseBuffer = new byte[2048]
    def responsePacket = new DatagramPacket(responseBuffer, responseBuffer.length)
    
    try {
        socket.receive(responsePacket)
        def endTime = System.nanoTime()
        SampleResult.sampleEnd()
        
        def response = new String(responsePacket.getData(), 0, responsePacket.getLength(), "UTF-8")
        
        SampleResult.setResponseData(response, "UTF-8")
        SampleResult.setDataType(SampleResult.TEXT)
        SampleResult.setResponseCodeOK()
        SampleResult.setResponseMessage("UDP Response Received")
        SampleResult.setBytes(responsePacket.getLength())
        SampleResult.setSentBytes(buffer.length)
        
        if (response.contains("SUCCESS") || response.contains("PROCESSED") || response.contains("OK")) {
            SampleResult.setSuccessful(true)
        } else {
            SampleResult.setSuccessful(false)
            SampleResult.setResponseMessage("Response does not indicate success: " + response)
        }
        
        def responseTime = (endTime - startTime) / 1000000.0
        vars.put("custom_response_time", String.format("%.2f", responseTime))
        
    } catch (SocketTimeoutException e) {
        SampleResult.sampleEnd()
        SampleResult.setResponseData("Timeout - No response within ${timeout}ms", "UTF-8")
        SampleResult.setSuccessful(false)
        SampleResult.setResponseCode("408")
        SampleResult.setResponseMessage("Request Timeout")
    }
    
    socket.close()
    
} catch (Exception e) {
    SampleResult.sampleEnd()
    log.error("UDP Error: " + e.getMessage())
    SampleResult.setResponseData("Error: " + e.getMessage(), "UTF-8")
    SampleResult.setSuccessful(false)
    SampleResult.setResponseCode("500")
    SampleResult.setResponseMessage("Internal Error: " + e.getMessage())
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
              <stringProp name="1691835182">PROCESSED</stringProp>
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">Response must indicate successful processing</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Medium Load Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">25</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
      
      <!-- FASE 4: High Load Test - 100 threads -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="üü† FASE 4: High Load (100 threads)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">20</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">20</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay">210</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="UDP Sensor Data" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.net.*
import java.io.*
import java.util.concurrent.ThreadLocalRandom

try {
    def serverHost = vars.get("SERVER_HOST")
    def serverPort = Integer.parseInt(vars.get("SERVER_PORT"))
    def timeout = Integer.parseInt(vars.get("TIMEOUT_MS"))
    
    def socket = new DatagramSocket()
    socket.setSoTimeout(timeout)
    
    def threadNum = ctx.getThreadNum()
    def iteration = vars.getIteration()
    def timestamp = System.currentTimeMillis()
    def sensorId = "KNEE_SENSOR_${threadNum}_${iteration}"
    def sensorValue = 20.0 + ThreadLocalRandom.current().nextDouble(0, 30)
    
    def sensorTypes = ["TEMPERATURE", "HUMIDITY", "PRESSURE", "CO2", "LIGHT"]
    def sensorType = sensorTypes[ThreadLocalRandom.current().nextInt(sensorTypes.size())]
    def location = "Lab_${threadNum % 5}"
    
    def message = "SENSOR_DATA|${sensorId}|${sensorType}|${location}|${timestamp}|${String.format('%.2f', sensorValue)}"
    def buffer = message.getBytes("UTF-8")
    
    def address = InetAddress.getByName(serverHost)
    def packet = new DatagramPacket(buffer, buffer.length, address, serverPort)
    
    SampleResult.setSamplerData("UDP Request: ${message}")
    SampleResult.setRequestHeaders("Host: ${serverHost}:${serverPort}\nProtocol: UDP\nPayload Size: ${buffer.length} bytes")
    
    def startTime = System.nanoTime()
    SampleResult.sampleStart()
    
    socket.send(packet)
    
    def responseBuffer = new byte[2048]
    def responsePacket = new DatagramPacket(responseBuffer, responseBuffer.length)
    
    try {
        socket.receive(responsePacket)
        def endTime = System.nanoTime()
        SampleResult.sampleEnd()
        
        def response = new String(responsePacket.getData(), 0, responsePacket.getLength(), "UTF-8")
        
        SampleResult.setResponseData(response, "UTF-8")
        SampleResult.setDataType(SampleResult.TEXT)
        SampleResult.setResponseCodeOK()
        SampleResult.setResponseMessage("UDP Response Received")
        SampleResult.setBytes(responsePacket.getLength())
        SampleResult.setSentBytes(buffer.length)
        
        if (response.contains("SUCCESS") || response.contains("PROCESSED") || response.contains("OK")) {
            SampleResult.setSuccessful(true)
        } else {
            SampleResult.setSuccessful(false)
            SampleResult.setResponseMessage("Response does not indicate success: " + response)
        }
        
        def responseTime = (endTime - startTime) / 1000000.0
        vars.put("custom_response_time", String.format("%.2f", responseTime))
        
    } catch (SocketTimeoutException e) {
        SampleResult.sampleEnd()
        SampleResult.setResponseData("Timeout - No response within ${timeout}ms", "UTF-8")
        SampleResult.setSuccessful(false)
        SampleResult.setResponseCode("408")
        SampleResult.setResponseMessage("Request Timeout")
    }
    
    socket.close()
    
} catch (Exception e) {
    SampleResult.sampleEnd()
    log.error("UDP Error: " + e.getMessage())
    SampleResult.setResponseData("Error: " + e.getMessage(), "UTF-8")
    SampleResult.setSuccessful(false)
    SampleResult.setResponseCode("500")
    SampleResult.setResponseMessage("Internal Error: " + e.getMessage())
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
              <stringProp name="1691835182">PROCESSED</stringProp>
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">Response must indicate successful processing</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="High Load Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">10</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
      
      <!-- FASE 5: Stress Test - 200 threads -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="üî¥ FASE 5: Stress Test (200 threads)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">20</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">200</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay">280</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="UDP Sensor Data" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.net.*
import java.io.*
import java.util.concurrent.ThreadLocalRandom

try {
    def serverHost = vars.get("SERVER_HOST")
    def serverPort = Integer.parseInt(vars.get("SERVER_PORT"))
    def timeout = Integer.parseInt(vars.get("TIMEOUT_MS"))
    
    def socket = new DatagramSocket()
    socket.setSoTimeout(timeout)
    
    def threadNum = ctx.getThreadNum()
    def iteration = vars.getIteration()
    def timestamp = System.currentTimeMillis()
    def sensorId = "KNEE_SENSOR_${threadNum}_${iteration}"
    def sensorValue = 20.0 + ThreadLocalRandom.current().nextDouble(0, 30)
    
    def sensorTypes = ["TEMPERATURE", "HUMIDITY", "PRESSURE", "CO2", "LIGHT"]
    def sensorType = sensorTypes[ThreadLocalRandom.current().nextInt(sensorTypes.size())]
    def location = "Lab_${threadNum % 5}"
    
    def message = "SENSOR_DATA|${sensorId}|${sensorType}|${location}|${timestamp}|${String.format('%.2f', sensorValue)}"
    def buffer = message.getBytes("UTF-8")
    
    def address = InetAddress.getByName(serverHost)
    def packet = new DatagramPacket(buffer, buffer.length, address, serverPort)
    
    SampleResult.setSamplerData("UDP Request: ${message}")
    SampleResult.setRequestHeaders("Host: ${serverHost}:${serverPort}\nProtocol: UDP\nPayload Size: ${buffer.length} bytes")
    
    def startTime = System.nanoTime()
    SampleResult.sampleStart()
    
    socket.send(packet)
    
    def responseBuffer = new byte[2048]
    def responsePacket = new DatagramPacket(responseBuffer, responseBuffer.length)
    
    try {
        socket.receive(responsePacket)
        def endTime = System.nanoTime()
        SampleResult.sampleEnd()
        
        def response = new String(responsePacket.getData(), 0, responsePacket.getLength(), "UTF-8")
        
        SampleResult.setResponseData(response, "UTF-8")
        SampleResult.setDataType(SampleResult.TEXT)
        SampleResult.setResponseCodeOK()
        SampleResult.setResponseMessage("UDP Response Received")
        SampleResult.setBytes(responsePacket.getLength())
        SampleResult.setSentBytes(buffer.length)
        
        if (response.contains("SUCCESS") || response.contains("PROCESSED") || response.contains("OK")) {
            SampleResult.setSuccessful(true)
        } else {
            SampleResult.setSuccessful(false)
            SampleResult.setResponseMessage("Response does not indicate success: " + response)
        }
        
        def responseTime = (endTime - startTime) / 1000000.0
        vars.put("custom_response_time", String.format("%.2f", responseTime))
        
    } catch (SocketTimeoutException e) {
        SampleResult.sampleEnd()
        SampleResult.setResponseData("Timeout - No response within ${timeout}ms", "UTF-8")
        SampleResult.setSuccessful(false)
        SampleResult.setResponseCode("408")
        SampleResult.setResponseMessage("Request Timeout")
    }
    
    socket.close()
    
} catch (Exception e) {
    SampleResult.sampleEnd()
    log.error("UDP Error: " + e.getMessage())
    SampleResult.setResponseData("Error: " + e.getMessage(), "UTF-8")
    SampleResult.setSuccessful(false)
    SampleResult.setResponseCode("500")
    SampleResult.setResponseMessage("Internal Error: " + e.getMessage())
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
              <stringProp name="1691835182">PROCESSED</stringProp>
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">Response must indicate successful processing</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Stress Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">5</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
      
      <!-- FASE 6: Peak Test - 500 threads -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="üî• FASE 6: Peak Test (500 threads)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">500</stringProp>
        <stringProp name="ThreadGroup.ramp_time">45</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay">350</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="UDP Sensor Data" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.net.*
import java.io.*
import java.util.concurrent.ThreadLocalRandom

try {
    def serverHost = vars.get("SERVER_HOST")
    def serverPort = Integer.parseInt(vars.get("SERVER_PORT"))
    def timeout = Integer.parseInt(vars.get("TIMEOUT_MS"))
    
    def socket = new DatagramSocket()
    socket.setSoTimeout(timeout)
    
    def threadNum = ctx.getThreadNum()
    def iteration = vars.getIteration()
    def timestamp = System.currentTimeMillis()
    def sensorId = "KNEE_SENSOR_${threadNum}_${iteration}"
    def sensorValue = 20.0 + ThreadLocalRandom.current().nextDouble(0, 30)
    
    def sensorTypes = ["TEMPERATURE", "HUMIDITY", "PRESSURE", "CO2", "LIGHT"]
    def sensorType = sensorTypes[ThreadLocalRandom.current().nextInt(sensorTypes.size())]
    def location = "Lab_${threadNum % 5}"
    
    def message = "SENSOR_DATA|${sensorId}|${sensorType}|${location}|${timestamp}|${String.format('%.2f', sensorValue)}"
    def buffer = message.getBytes("UTF-8")
    
    def address = InetAddress.getByName(serverHost)
    def packet = new DatagramPacket(buffer, buffer.length, address, serverPort)
    
    SampleResult.setSamplerData("UDP Request: ${message}")
    SampleResult.setRequestHeaders("Host: ${serverHost}:${serverPort}\nProtocol: UDP\nPayload Size: ${buffer.length} bytes")
    
    def startTime = System.nanoTime()
    SampleResult.sampleStart()
    
    socket.send(packet)
    
    def responseBuffer = new byte[2048]
    def responsePacket = new DatagramPacket(responseBuffer, responseBuffer.length)
    
    try {
        socket.receive(responsePacket)
        def endTime = System.nanoTime()
        SampleResult.sampleEnd()
        
        def response = new String(responsePacket.getData(), 0, responsePacket.getLength(), "UTF-8")
        
        SampleResult.setResponseData(response, "UTF-8")
        SampleResult.setDataType(SampleResult.TEXT)
        SampleResult.setResponseCodeOK()
        SampleResult.setResponseMessage("UDP Response Received")
        SampleResult.setBytes(responsePacket.getLength())
        SampleResult.setSentBytes(buffer.length)
        
        if (response.contains("SUCCESS") || response.contains("PROCESSED") || response.contains("OK")) {
            SampleResult.setSuccessful(true)
        } else {
            SampleResult.setSuccessful(false)
            SampleResult.setResponseMessage("Response does not indicate success: " + response)
        }
        
        def responseTime = (endTime - startTime) / 1000000.0
        vars.put("custom_response_time", String.format("%.2f", responseTime))
        
    } catch (SocketTimeoutException e) {
        SampleResult.sampleEnd()
        SampleResult.setResponseData("Timeout - No response within ${timeout}ms", "UTF-8")
        SampleResult.setSuccessful(false)
        SampleResult.setResponseCode("408")
        SampleResult.setResponseMessage("Request Timeout")
    }
    
    socket.close()
    
} catch (Exception e) {
    SampleResult.sampleEnd()
    log.error("UDP Error: " + e.getMessage())
    SampleResult.setResponseData("Error: " + e.getMessage(), "UTF-8")
    SampleResult.setSuccessful(false)
    SampleResult.setResponseCode("500")
    SampleResult.setResponseMessage("Internal Error: " + e.getMessage())
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
              <stringProp name="1691835182">PROCESSED</stringProp>
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">Response must indicate successful processing</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Peak Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
      
      <!-- LISTENERS PARA AN√ÅLISE -->
      
      <!-- Aggregate Report - Estat√≠sticas por fase -->
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="üìä Aggregate Report - Knee Analysis" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">jmeter/results/udp_knee_aggregate.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      
      <!-- Response Times Over Time - Para identificar degrada√ß√£o -->
      <ResultCollector guiclass="ResponseTimesOverTimeGui" testclass="ResultCollector" testname="üìà Response Times Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">jmeter/results/udp_knee_response_times.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      
      <!-- Transactions per Second - Para identificar throughput m√°ximo -->
      <ResultCollector guiclass="TransactionsPerSecondGui" testclass="ResultCollector" testname="üöÄ Transactions per Second" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">jmeter/results/udp_knee_tps.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      
      <!-- Active Threads Over Time - Para ver evolu√ß√£o da carga -->
      <ResultCollector guiclass="ActiveThreadsOverTimeGui" testclass="ResultCollector" testname="üë• Active Threads Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">jmeter/results/udp_knee_threads.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      
      <!-- Summary Report - Relat√≥rio detalhado final -->
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="üìã Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">jmeter/results/udp_knee_summary.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      
      <!-- View Results Tree - Para debugging apenas se necess√°rio -->
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="üîç View Results Tree (Debug Only)" enabled="false">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">jmeter/results/udp_knee_debug.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      
    </hashTree>
  </hashTree>
</jmeterTestPlan>