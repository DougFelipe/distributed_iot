<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="üìä Sistema IoT - Teste Simplificado">
      <stringProp name="TestPlan.comments">
        üéØ OBJETIVO: Testar sistema IoT distribu√≠do com padr√µes GoF
        
        üìã CEN√ÅRIOS:
        1. Registro de Sensores (5 threads)
        2. Envio de Dados Cont√≠nuo
        3. Heartbeat Monitoring
        
        üìà M√âTRICAS SALVAS EM: jmeter/results/
      </stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="üîß Vari√°veis do Sistema">
        <collectionProp name="Arguments.arguments">
          <elementProp name="IOT_SERVER_HOST" elementType="Argument">
            <stringProp name="Argument.name">IOT_SERVER_HOST</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.desc">Host do Gateway IoT</stringProp>
          </elementProp>
          <elementProp name="IOT_GATEWAY_PORT" elementType="Argument">
            <stringProp name="Argument.name">IOT_GATEWAY_PORT</stringProp>
            <stringProp name="Argument.value">9090</stringProp>
            <stringProp name="Argument.desc">Porta UDP do Gateway</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="üîã Sensores IoT - 5 Threads">
        <stringProp name="TestPlan.comments">5 sensores IoT por 2 minutos</stringProp>
        <intProp name="ThreadGroup.num_threads">5</intProp>
        <intProp name="ThreadGroup.ramp_time">5</intProp>
        <longProp name="ThreadGroup.duration">120</longProp>
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="üìù Registro de Sensor">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="script">// Importa√ß√µes necess√°rias
import java.net.DatagramSocket;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.util.Date;

try {
    // Configura√ß√£o do sensor
    int threadNum = ctx.getThreadNum() + 1;
    String sensorId = &quot;TEMP_SENSOR_&quot; + String.format(&quot;%02d&quot;, threadNum);
    String sensorType = &quot;TEMPERATURE&quot;;
    
    // Criar socket UDP
    DatagramSocket socket = new DatagramSocket();
    
    // Mensagem de registro
    String message = &quot;SENSOR_REGISTER|&quot; + sensorId + &quot;|&quot; + sensorType + &quot;|Lab-&quot; + threadNum + &quot;|&quot; + new Date() + &quot;|0.0&quot;;
    
    // Enviar via UDP
    byte[] data = message.getBytes(&quot;UTF-8&quot;);
    InetAddress address = InetAddress.getByName(vars.get(&quot;IOT_SERVER_HOST&quot;));
    int port = Integer.parseInt(vars.get(&quot;IOT_GATEWAY_PORT&quot;));
    
    DatagramPacket packet = new DatagramPacket(data, data.length, address, port);
    socket.send(packet);
    socket.close();
    
    // Salvar dados do sensor
    vars.put(&quot;SENSOR_ID&quot;, sensorId);
    vars.put(&quot;SENSOR_TYPE&quot;, sensorType);
    
    // Configurar resultado
    SampleResult.setResponseData(&quot;Sensor registrado: &quot; + sensorId, &quot;UTF-8&quot;);
    SampleResult.setResponseCodeOK();
    SampleResult.setSuccessful(true);
    
    log.info(&quot;‚úÖ Sensor registrado: &quot; + sensorId);
    
} catch (Exception e) {
    SampleResult.setResponseCode(&quot;500&quot;);
    SampleResult.setResponseMessage(&quot;Erro: &quot; + e.getMessage());
    SampleResult.setSuccessful(false);
    log.error(&quot;‚ùå Erro no registro: &quot; + e.getMessage());
}</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
        </JSR223Sampler>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Executar Apenas Uma Vez"/>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="üìä Envio de Dados" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="script">// Importa√ß√µes necess√°rias
import java.net.DatagramSocket;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.util.Date;
import java.util.Random;

try {
    // Recuperar dados do sensor
    String sensorId = vars.get(&quot;SENSOR_ID&quot;);
    String sensorType = vars.get(&quot;SENSOR_TYPE&quot;);
    
    if (sensorId == null) {
        int threadNum = ctx.getThreadNum() + 1;
        sensorId = &quot;TEMP_SENSOR_&quot; + String.format(&quot;%02d&quot;, threadNum);
        sensorType = &quot;TEMPERATURE&quot;;
    }
    
    // Gerar valor de temperatura (15-35¬∞C)
    Random random = new Random();
    double temperature = 15.0 + random.nextDouble() * 20.0;
    
    // Criar socket UDP
    DatagramSocket socket = new DatagramSocket();
    
    // Mensagem de dados
    String message = &quot;SENSOR_DATA|&quot; + sensorId + &quot;|&quot; + sensorType + &quot;|&quot; + new Date() + &quot;|&quot; + String.format(&quot;%.2f&quot;, temperature);
    
    // Enviar via UDP
    byte[] data = message.getBytes(&quot;UTF-8&quot;);
    InetAddress address = InetAddress.getByName(vars.get(&quot;IOT_SERVER_HOST&quot;));
    int port = Integer.parseInt(vars.get(&quot;IOT_GATEWAY_PORT&quot;));
    
    DatagramPacket packet = new DatagramPacket(data, data.length, address, port);
    socket.send(packet);
    socket.close();
    
    // Configurar resultado
    String response = &quot;Dados enviados: &quot; + sensorId + &quot; = &quot; + String.format(&quot;%.2f&quot;, temperature) + &quot;¬∞C&quot;;
    SampleResult.setResponseData(response, &quot;UTF-8&quot;);
    SampleResult.setResponseCodeOK();
    SampleResult.setSuccessful(true);
    
    log.info(&quot;üìä &quot; + response);
    
} catch (Exception e) {
    SampleResult.setResponseCode(&quot;500&quot;);
    SampleResult.setResponseMessage(&quot;Erro: &quot; + e.getMessage());
    SampleResult.setSuccessful(false);
    log.error(&quot;‚ùå Erro no envio: &quot; + e.getMessage());
}</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
        </JSR223Sampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="‚è±Ô∏è Timer - Dados (3s)" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="üíì Heartbeat" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="script">// Importa√ß√µes necess√°rias
import java.net.DatagramSocket;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.util.Date;

try {
    // Recuperar dados do sensor
    String sensorId = vars.get(&quot;SENSOR_ID&quot;);
    String sensorType = vars.get(&quot;SENSOR_TYPE&quot;);
    
    if (sensorId == null) {
        int threadNum = ctx.getThreadNum() + 1;
        sensorId = &quot;TEMP_SENSOR_&quot; + String.format(&quot;%02d&quot;, threadNum);
        sensorType = &quot;TEMPERATURE&quot;;
    }
    
    // Criar socket UDP
    DatagramSocket socket = new DatagramSocket();
    
    // Mensagem de heartbeat
    String message = &quot;HEARTBEAT|&quot; + sensorId + &quot;|&quot; + sensorType + &quot;|&quot; + new Date() + &quot;|ALIVE&quot;;
    
    // Enviar via UDP
    byte[] data = message.getBytes(&quot;UTF-8&quot;);
    InetAddress address = InetAddress.getByName(vars.get(&quot;IOT_SERVER_HOST&quot;));
    int port = Integer.parseInt(vars.get(&quot;IOT_GATEWAY_PORT&quot;));
    
    DatagramPacket packet = new DatagramPacket(data, data.length, address, port);
    socket.send(packet);
    socket.close();
    
    // Configurar resultado
    String response = &quot;Heartbeat: &quot; + sensorId + &quot; - ALIVE&quot;;
    SampleResult.setResponseData(response, &quot;UTF-8&quot;);
    SampleResult.setResponseCodeOK();
    SampleResult.setSuccessful(true);
    
    log.info(&quot;üíì &quot; + response);
    
} catch (Exception e) {
    SampleResult.setResponseCode(&quot;500&quot;);
    SampleResult.setResponseMessage(&quot;Erro: &quot; + e.getMessage());
    SampleResult.setSuccessful(false);
    log.error(&quot;‚ùå Erro no heartbeat: &quot; + e.getMessage());
}</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
        </JSR223Sampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="‚è±Ô∏è Timer - Heartbeat (5s)" enabled="true">
            <stringProp name="ConstantTimer.delay">5000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="üìã Summary Report">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">jmeter/results/summary_report.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="üå≥ View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">jmeter/results/detailed_results.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
