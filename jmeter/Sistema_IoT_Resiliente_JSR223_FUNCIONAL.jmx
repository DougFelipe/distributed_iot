<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="üõ°Ô∏è Sistema IoT - Teste de Resili√™ncia JSR223 FUNCIONAL">
      <stringProp name="TestPlan.comments">
        üõ°Ô∏è SISTEMA IOT DISTRIBU√çDO - TESTE DE RESILI√äNCIA JSR223 FUNCIONAL
        
        üìä Arquitetura Final:
        ‚úÖ Inst√¢ncias A: Sensores IoT (Stateless) - TEMPERATURA e UMIDADE
        ‚úÖ Inst√¢ncias B: Data Receivers (Stateful) - 2+ receptores com persist√™ncia
        ‚úÖ Gateway: Proxy roteando mensagens para Data Receivers
        ‚úÖ Toler√¢ncia a Falhas: Recupera√ß√£o autom√°tica e monitoramento
        
        üß™ Cen√°rios de Teste FUNCIONAIS COM JSR223:
        ‚úÖ SERVIDOR ONLINE: 0% erros (UDP via Java puro + SUCCESS assertions)
        ‚ùå SERVIDOR OFFLINE: 100% erros (timeout + assertion failure)
        üîÑ RECUPERA√á√ÉO: Erros diminuem quando servidor volta
        
        üéØ SOLU√á√ÉO DEFINITIVA PARA PROBLEMA UDP JMETER! üéØ
        
        ‚ö° Usando JSR223 Samplers em vez do plugin UDP problem√°tico
        ‚ö° C√≥digo Java/Groovy puro para controle total do UDP
        ‚ö° Mesma estrutura e l√≥gica do arquivo original
      </stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="GATEWAY_HOST" elementType="Argument">
            <stringProp name="Argument.name">GATEWAY_HOST</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
          </elementProp>
          <elementProp name="GATEWAY_PORT" elementType="Argument">
            <stringProp name="Argument.name">GATEWAY_PORT</stringProp>
            <stringProp name="Argument.value">9090</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ü§ñ Sensores IoT - Carga Distribu√≠da JSR223">
        <intProp name="ThreadGroup.num_threads">20</intProp>
        <intProp name="ThreadGroup.ramp_time">10</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">50</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="üì° Registro Sensor IoT - JSR223" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.net.*
import java.io.*

try {
    // Obter vari√°veis do Test Plan
    def gatewayHost = vars.get(&quot;GATEWAY_HOST&quot;)
    def gatewayPort = Integer.parseInt(vars.get(&quot;GATEWAY_PORT&quot;))
    
    // Criar socket UDP
    def socket = new DatagramSocket()
    
    // Gerar dados din√¢micos (mesma l√≥gica do arquivo original)
    def threadNum = ctx.getThreadNum()
    def randomId = (int)(Math.random() * 999) + 1
    def timestamp = System.currentTimeMillis()
    def tempValue = (int)(Math.random() * 16) + 20 // 20-35
    def tempDecimal = (int)(Math.random() * 10)    // 0-9
    
    // Montar mensagem (formato original)
    def sensorId = &quot;SENSOR_${threadNum}_${randomId}&quot;
    def message = &quot;SENSOR_REGISTER|${sensorId}|TEMPERATURE|Lab-DIMAP-${threadNum}|${timestamp}|${tempValue}.${tempDecimal}&quot;
    def buffer = message.getBytes()
    
    // Endere√ßo do servidor
    def address = InetAddress.getByName(gatewayHost)
    def packet = new DatagramPacket(buffer, buffer.length, address, gatewayPort)
    
    log.info(&quot;üì° [REGISTRO] Enviando: &quot; + message)
    
    // Definir dados do sampler para JMeter
    SampleResult.setSamplerData(&quot;UDP REGISTER Message: &quot; + message)
    SampleResult.setRequestHeaders(&quot;Host: ${gatewayHost}:${gatewayPort}\nProtocol: UDP\nType: SENSOR_REGISTER&quot;)
    
    // Enviar mensagem
    def startTime = System.currentTimeMillis()
    socket.send(packet)
    
    // Aguardar resposta (timeout original: 3000ms)
    def responseBuffer = new byte[1024]
    def responsePacket = new DatagramPacket(responseBuffer, responseBuffer.length)
    
    socket.setSoTimeout(3000) // Mesmo timeout do original
    
    try {
        socket.receive(responsePacket)
        def response = new String(responsePacket.getData(), 0, responsePacket.getLength())
        def endTime = System.currentTimeMillis()
        
        log.info(&quot;‚úÖ [REGISTRO] Resposta: &quot; + response)
        
        // Configurar resultado do sampler
        SampleResult.setResponseData(response, &quot;UTF-8&quot;)
        SampleResult.setDataType(SampleResult.TEXT)
        SampleResult.setResponseCodeOK()
        SampleResult.setResponseMessage(&quot;UDP Response Received&quot;)
        SampleResult.setSuccessful(true)
        SampleResult.setLatency(endTime - startTime)
        
        // Verificar se cont√©m SUCCESS (mesma l√≥gica do original)
        if (response.contains(&quot;SUCCESS&quot;)) {
            log.info(&quot;üéâ [REGISTRO] Sensor registrado com sucesso!&quot;)
        } else {
            SampleResult.setSuccessful(false)
            SampleResult.setResponseMessage(&quot;Sistema n√£o respondeu com SUCCESS - pode estar offline!&quot;)
        }
        
    } catch (SocketTimeoutException e) {
        log.error(&quot;‚ùå [REGISTRO] Timeout UDP - Sistema pode estar offline&quot;)
        SampleResult.setResponseData(&quot;Timeout - nenhuma resposta em 3 segundos&quot;, &quot;UTF-8&quot;)
        SampleResult.setSuccessful(false)
        SampleResult.setResponseCode(&quot;408&quot;)
        SampleResult.setResponseMessage(&quot;Request Timeout&quot;)
    }
    
    socket.close()
    
} catch (Exception e) {
    log.error(&quot;‚ùå [REGISTRO] Erro UDP: &quot; + e.getMessage())
    SampleResult.setResponseData(&quot;Erro: &quot; + e.getMessage(), &quot;UTF-8&quot;)
    SampleResult.setSuccessful(false)
    SampleResult.setResponseCode(&quot;500&quot;)
    SampleResult.setResponseMessage(&quot;Internal Server Error: &quot; + e.getMessage())
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="‚úÖ Resposta SUCCESS Obrigat√≥ria" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">ERRO: Sistema n√£o respondeu com SUCCESS - pode estar offline!</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="‚è±Ô∏è Delay Realistic" enabled="true">
          <stringProp name="ConstantTimer.delay">100</stringProp>
        </ConstantTimer>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="üìä Envio Dados IoT - JSR223" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.net.*
import java.io.*

try {
    // Obter vari√°veis do Test Plan
    def gatewayHost = vars.get(&quot;GATEWAY_HOST&quot;)
    def gatewayPort = Integer.parseInt(vars.get(&quot;GATEWAY_PORT&quot;))
    
    // Criar socket UDP
    def socket = new DatagramSocket()
    
    // Gerar dados din√¢micos (mesma l√≥gica do arquivo original)
    def threadNum = ctx.getThreadNum()
    def randomId = (int)(Math.random() * 999) + 1
    def timestamp = System.currentTimeMillis()
    def tempValue = (int)(Math.random() * 26) + 15 // 15-40
    def tempDecimal = (int)(Math.random() * 10)    // 0-9
    
    // Montar mensagem TEMPERATURA (formato original)
    def sensorId = &quot;SENSOR_${threadNum}_${randomId}&quot;
    def message = &quot;SENSOR_DATA|${sensorId}|TEMPERATURE|Lab-DIMAP-${threadNum}|${timestamp}|${tempValue}.${tempDecimal}&quot;
    def buffer = message.getBytes()
    
    // Endere√ßo do servidor
    def address = InetAddress.getByName(gatewayHost)
    def packet = new DatagramPacket(buffer, buffer.length, address, gatewayPort)
    
    log.info(&quot;üìä [TEMP_DATA] Enviando: &quot; + message)
    
    // Definir dados do sampler para JMeter
    SampleResult.setSamplerData(&quot;UDP TEMPERATURE Data: &quot; + message)
    SampleResult.setRequestHeaders(&quot;Host: ${gatewayHost}:${gatewayPort}\nProtocol: UDP\nType: SENSOR_DATA\nSensor: TEMPERATURE&quot;)
    
    // Enviar mensagem
    def startTime = System.currentTimeMillis()
    socket.send(packet)
    
    // Aguardar resposta (timeout original: 3000ms)
    def responseBuffer = new byte[1024]
    def responsePacket = new DatagramPacket(responseBuffer, responseBuffer.length)
    
    socket.setSoTimeout(3000) // Mesmo timeout do original
    
    try {
        socket.receive(responsePacket)
        def response = new String(responsePacket.getData(), 0, responsePacket.getLength())
        def endTime = System.currentTimeMillis()
        
        log.info(&quot;‚úÖ [TEMP_DATA] Resposta: &quot; + response)
        
        // Configurar resultado do sampler
        SampleResult.setResponseData(response, &quot;UTF-8&quot;)
        SampleResult.setDataType(SampleResult.TEXT)
        SampleResult.setResponseCodeOK()
        SampleResult.setResponseMessage(&quot;UDP Response Received&quot;)
        SampleResult.setSuccessful(true)
        SampleResult.setLatency(endTime - startTime)
        
        // Verificar se cont√©m SUCCESS (mesma l√≥gica do original)
        if (response.contains(&quot;SUCCESS&quot;)) {
            log.info(&quot;üéâ [TEMP_DATA] Dados temperatura enviados com sucesso!&quot;)
        } else {
            SampleResult.setSuccessful(false)
            SampleResult.setResponseMessage(&quot;Sistema n√£o respondeu com SUCCESS - pode estar offline!&quot;)
        }
        
    } catch (SocketTimeoutException e) {
        log.error(&quot;‚ùå [TEMP_DATA] Timeout UDP - Sistema pode estar offline&quot;)
        SampleResult.setResponseData(&quot;Timeout - nenhuma resposta em 3 segundos&quot;, &quot;UTF-8&quot;)
        SampleResult.setSuccessful(false)
        SampleResult.setResponseCode(&quot;408&quot;)
        SampleResult.setResponseMessage(&quot;Request Timeout&quot;)
    }
    
    socket.close()
    
} catch (Exception e) {
    log.error(&quot;‚ùå [TEMP_DATA] Erro UDP: &quot; + e.getMessage())
    SampleResult.setResponseData(&quot;Erro: &quot; + e.getMessage(), &quot;UTF-8&quot;)
    SampleResult.setSuccessful(false)
    SampleResult.setResponseCode(&quot;500&quot;)
    SampleResult.setResponseMessage(&quot;Internal Server Error: &quot; + e.getMessage())
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="‚úÖ Resposta SUCCESS Obrigat√≥ria" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">ERRO: Sistema n√£o respondeu com SUCCESS - pode estar offline!</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="üíß Envio Dados Umidade - JSR223" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.net.*
import java.io.*

try {
    // Obter vari√°veis do Test Plan
    def gatewayHost = vars.get(&quot;GATEWAY_HOST&quot;)
    def gatewayPort = Integer.parseInt(vars.get(&quot;GATEWAY_PORT&quot;))
    
    // Criar socket UDP
    def socket = new DatagramSocket()
    
    // Gerar dados din√¢micos (mesma l√≥gica do arquivo original)
    def threadNum = ctx.getThreadNum()
    def randomId = (int)(Math.random() * 999) + 1
    def timestamp = System.currentTimeMillis()
    def humidityValue = (int)(Math.random() * 41) + 45 // 45-85
    def humidityDecimal = (int)(Math.random() * 10)    // 0-9
    
    // Montar mensagem UMIDADE (formato original)
    def sensorId = &quot;SENSOR_${threadNum}_${randomId}&quot;
    def message = &quot;SENSOR_DATA|${sensorId}|HUMIDITY|Lab-DIMAP-${threadNum}|${timestamp}|${humidityValue}.${humidityDecimal}&quot;
    def buffer = message.getBytes()
    
    // Endere√ßo do servidor
    def address = InetAddress.getByName(gatewayHost)
    def packet = new DatagramPacket(buffer, buffer.length, address, gatewayPort)
    
    log.info(&quot;üíß [HUMIDITY_DATA] Enviando: &quot; + message)
    
    // Definir dados do sampler para JMeter
    SampleResult.setSamplerData(&quot;UDP HUMIDITY Data: &quot; + message)
    SampleResult.setRequestHeaders(&quot;Host: ${gatewayHost}:${gatewayPort}\nProtocol: UDP\nType: SENSOR_DATA\nSensor: HUMIDITY&quot;)
    
    // Enviar mensagem
    def startTime = System.currentTimeMillis()
    socket.send(packet)
    
    // Aguardar resposta (timeout original: 3000ms)
    def responseBuffer = new byte[1024]
    def responsePacket = new DatagramPacket(responseBuffer, responseBuffer.length)
    
    socket.setSoTimeout(3000) // Mesmo timeout do original
    
    try {
        socket.receive(responsePacket)
        def response = new String(responsePacket.getData(), 0, responsePacket.getLength())
        def endTime = System.currentTimeMillis()
        
        log.info(&quot;‚úÖ [HUMIDITY_DATA] Resposta: &quot; + response)
        
        // Configurar resultado do sampler
        SampleResult.setResponseData(response, &quot;UTF-8&quot;)
        SampleResult.setDataType(SampleResult.TEXT)
        SampleResult.setResponseCodeOK()
        SampleResult.setResponseMessage(&quot;UDP Response Received&quot;)
        SampleResult.setSuccessful(true)
        SampleResult.setLatency(endTime - startTime)
        
        // Verificar se cont√©m SUCCESS (mesma l√≥gica do original)
        if (response.contains(&quot;SUCCESS&quot;)) {
            log.info(&quot;üéâ [HUMIDITY_DATA] Dados umidade enviados com sucesso!&quot;)
        } else {
            SampleResult.setSuccessful(false)
            SampleResult.setResponseMessage(&quot;Sistema n√£o respondeu com SUCCESS - pode estar offline!&quot;)
        }
        
    } catch (SocketTimeoutException e) {
        log.error(&quot;‚ùå [HUMIDITY_DATA] Timeout UDP - Sistema pode estar offline&quot;)
        SampleResult.setResponseData(&quot;Timeout - nenhuma resposta em 3 segundos&quot;, &quot;UTF-8&quot;)
        SampleResult.setSuccessful(false)
        SampleResult.setResponseCode(&quot;408&quot;)
        SampleResult.setResponseMessage(&quot;Request Timeout&quot;)
    }
    
    socket.close()
    
} catch (Exception e) {
    log.error(&quot;‚ùå [HUMIDITY_DATA] Erro UDP: &quot; + e.getMessage())
    SampleResult.setResponseData(&quot;Erro: &quot; + e.getMessage(), &quot;UTF-8&quot;)
    SampleResult.setSuccessful(false)
    SampleResult.setResponseCode(&quot;500&quot;)
    SampleResult.setResponseMessage(&quot;Internal Server Error: &quot; + e.getMessage())
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="‚úÖ Resposta SUCCESS Obrigat√≥ria" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">ERRO: Sistema n√£o respondeu com SUCCESS - pode estar offline!</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transactions per Second" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="üìâ Response Times Graph" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>false</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">jmeter/results/response_times_jsr223.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times Over Time" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">500</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="üìà Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">jmeter/results/summary_jsr223.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="üìä Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">jmeter/results/aggregate_jsr223.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="üîç View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">jmeter/results/detailed_jsr223.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
