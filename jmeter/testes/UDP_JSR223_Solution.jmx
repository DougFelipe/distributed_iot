<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="üéØ UDP Test - JSR223 Sampler">
      <stringProp name="TestPlan.comments">
        üéØ SOLU√á√ÉO: UDP COM JSR223 SAMPLER
        
        ‚úÖ Usa c√≥digo Java puro (como nosso teste que funcionou)
        ‚úÖ N√£o depende do plugin UDP problem√°tico
        ‚úÖ Controle total sobre envio e recebimento UDP
        
        ESTA √â A SOLU√á√ÉO PARA O PROBLEMA DO JMETER UDP!
      </stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="üéØ UDP JSR223 Thread">
        <intProp name="ThreadGroup.num_threads">50</intProp>
        <intProp name="ThreadGroup.ramp_time">15</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">3</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="üéØ UDP Request - Java Code" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.net.*
import java.io.*

try {
    // Criar socket UDP
    def socket = new DatagramSocket()
    
    // Gerar ID √∫nico para o sensor
    def threadNum = ctx.getThreadNum()
    def sensorId = &quot;SENSOR_JMETER_${threadNum}_${System.currentTimeMillis()}&quot;
    def timestamp = System.currentTimeMillis()
    
    // Mensagem de teste
    def message = &quot;SENSOR_REGISTER|${sensorId}|TEMPERATURE|Lab-JMeter|${timestamp}|25.5&quot;
    def buffer = message.getBytes()
    
    // Endere√ßo do servidor
    def address = InetAddress.getByName(&quot;localhost&quot;)
    def packet = new DatagramPacket(buffer, buffer.length, address, 9090)
    
    log.info(&quot;üöÄ Enviando: &quot; + message)
    
    // Definir dados do sampler para JMeter
    SampleResult.setSamplerData(&quot;UDP Message: &quot; + message)
    SampleResult.setRequestHeaders(&quot;Host: localhost:9090\nProtocol: UDP&quot;)
    
    // Enviar mensagem
    def startTime = System.currentTimeMillis()
    socket.send(packet)
    
    // Aguardar resposta
    def responseBuffer = new byte[1024]
    def responsePacket = new DatagramPacket(responseBuffer, responseBuffer.length)
    
    socket.setSoTimeout(5000) // 5 segundos timeout
    
    try {
        socket.receive(responsePacket)
        def response = new String(responsePacket.getData(), 0, responsePacket.getLength())
        def endTime = System.currentTimeMillis()
        
        log.info(&quot;‚úÖ Resposta: &quot; + response)
        
        // Configurar resultado do sampler
        SampleResult.setResponseData(response, &quot;UTF-8&quot;)
        SampleResult.setDataType(SampleResult.TEXT)
        SampleResult.setResponseCodeOK()
        SampleResult.setResponseMessage(&quot;UDP Response Received&quot;)
        SampleResult.setSuccessful(true)
        SampleResult.setLatency(endTime - startTime)
        
        // Verificar se cont√©m SUCCESS
        if (response.contains(&quot;SUCCESS&quot;) &amp;&amp; response.contains(&quot;PROCESSED&quot;)) {
            log.info(&quot;üéâ Teste UDP SUCESSO!&quot;)
        } else {
            SampleResult.setSuccessful(false)
            SampleResult.setResponseMessage(&quot;Response n√£o cont√©m SUCCESS/PROCESSED&quot;)
        }
        
    } catch (SocketTimeoutException e) {
        log.error(&quot;‚ùå Timeout UDP&quot;)
        SampleResult.setResponseData(&quot;Timeout - nenhuma resposta em 5 segundos&quot;, &quot;UTF-8&quot;)
        SampleResult.setSuccessful(false)
        SampleResult.setResponseCode(&quot;408&quot;)
        SampleResult.setResponseMessage(&quot;Request Timeout&quot;)
    }
    
    socket.close()
    
} catch (Exception e) {
    log.error(&quot;‚ùå Erro UDP: &quot; + e.getMessage())
    SampleResult.setResponseData(&quot;Erro: &quot; + e.getMessage(), &quot;UTF-8&quot;)
    SampleResult.setSuccessful(false)
    SampleResult.setResponseCode(&quot;500&quot;)
    SampleResult.setResponseMessage(&quot;Internal Server Error: &quot; + e.getMessage())
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="‚úÖ Success Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
              <stringProp name="1691835182">PROCESSED</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">‚ùå Resposta UDP deve conter SUCCESS e PROCESSED</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="‚è±Ô∏è Delay Between Requests" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="üîç View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">jmeter/results/udp_jsr223_success.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="üìä Summary Report">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">jmeter/results/udp_jsr223_summary.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
